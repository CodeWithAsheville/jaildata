name: Manual Deploy

on:
    workflow_dispatch:
        inputs:
            branch:
                description: "Branch to deploy"
                required: true
                default: "main"
                type: string
            environment:
                description: "Environment to deploy to"
                required: true
                default: "dev"
                type: choice
                options:
                    - dev
                    - prod
            deploy_backend:
                description: "Deploy backend API"
                required: true
                default: true
                type: boolean
            terraform_apply:
                description: "Apply Terraform changes"
                required: true
                default: true
                type: boolean

jobs:
    verify-ssm-parameters:
        name: Verify SSM Parameters
        uses: ./.github/workflows/verify-ssm-parameters.yml
        with:
            environment: ${{ github.event.inputs.environment }}
        secrets: inherit

    terraform-apply:
        name: Terraform Apply
        runs-on: ubuntu-latest
        needs: verify-ssm-parameters
        if: ${{ github.event.inputs.terraform_apply == 'true' }}
        defaults:
            run:
                working-directory: ./infra/terraform
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.inputs.branch }}

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: "1.11.4"

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ github.event.inputs.environment == 'dev' && secrets.DEV_AWS_ACCESS_KEY_ID || secrets.PROD_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ github.event.inputs.environment == 'dev' && secrets.DEV_AWS_SECRET_ACCESS_KEY || secrets.PROD_AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-2

            - name: Set Terraform environment variables
              run: |
                  echo "TF_VAR_alert_email=${{ vars.ALERT_EMAIL }}" >> $GITHUB_ENV

            - name: Terraform Init
              working-directory: ./infra/terraform/${{ github.event.inputs.environment }}
              run: terraform init

            - name: Terraform Apply
              working-directory: ./infra/terraform/${{ github.event.inputs.environment }}
              run: |
                  terraform apply -auto-approve

    deploy-backend:
        name: Deploy Backend API
        runs-on: ubuntu-latest
        needs: verify-ssm-parameters
        if: ${{ github.event.inputs.deploy_backend == 'true' }}
        defaults:
            run:
                working-directory: ./serverless
        steps:
            - uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.inputs.branch }}

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v4
              with:
                  aws-access-key-id: ${{ github.event.inputs.environment == 'dev' && secrets.DEV_AWS_ACCESS_KEY_ID || secrets.PROD_AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ github.event.inputs.environment == 'dev' && secrets.DEV_AWS_SECRET_ACCESS_KEY || secrets.PROD_AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-2

            - name: Use Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "20"
                  cache: "npm"
                  cache-dependency-path: "./serverless/package-lock.json"

            - name: Install dependencies
              run: npm ci

            - name: Run tests before deployment
              run: npm test

            - name: Run linting
              run: npm run lint

            - name: Install serverless framework
              run: npm install -g serverless

            - name: Deploy API with serverless
              run: |
                  cd api
                  serverless deploy --stage ${{ github.event.inputs.environment }}
