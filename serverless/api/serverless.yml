service: api

provider:
    name: aws
    runtime: nodejs20.x
    region: us-east-2
    stage: ${opt:stage, 'dev'}
    memorySize: 512
    deploymentBucket:
        name: jaildata-serverless-deployments-${self:provider.stage}
    environment:
        STAGE: ${self:provider.stage}
        JAILDATA_TABLE: !Ref JailDataTable
        ERROR_CACHE_TABLE: !Ref ErrorCacheTable
        SERVICE_NAME: ${self:service}
        AWS_ACCOUNT_ID: !Ref "AWS::AccountId"
        BATCH_PROCESSING_QUEUE_URL: !Ref BatchProcessingQueue
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                      - dynamodb:BatchGetItem
                      - dynamodb:BatchWriteItem
                      - dynamodb:GetItem
                      - dynamodb:PutItem
                      - dynamodb:Query
                      - dynamodb:UpdateItem
                      - dynamodb:Scan
                  Resource:
                      - !GetAtt JailDataTable.Arn
                      - !Sub "${JailDataTable.Arn}/index/*"
                      - !GetAtt ErrorCacheTable.Arn

                - Effect: Allow
                  Action:
                      - logs:CreateLogGroup
                      - logs:CreateLogStream
                      - logs:PutLogEvents
                  Resource: arn:aws:logs:*:*:*

                - Effect: Allow
                  Action:
                      - cloudwatch:PutMetricData
                  Resource: "*"

                - Effect: Allow
                  Action:
                      - ssm:GetParameter
                  Resource:
                      - arn:aws:ssm:${self:provider.region}:*:parameter/jaildata*

                - Effect: Allow
                  Action:
                      - sns:Publish
                  Resource:
                      - !Ref AlertTopic

                - Effect: Allow
                  Action:
                      - sqs:SendMessage
                      - sqs:ReceiveMessage
                      - sqs:DeleteMessage
                      - sqs:GetQueueAttributes
                  Resource:
                      - !GetAtt BatchProcessingQueue.Arn
                      - !GetAtt BatchProcessingDeadLetterQueue.Arn

    apiGateway:
        disableDefaultEndpoint: true
        apiKeys:
            - test:
                  - test-api-key
        usagePlan:
            - test:
                  quota:
                      limit: 500
                      period: MONTH
                  throttle:
                      burstLimit: 5
                      rateLimit: 2
            - community:
                  quota:
                      limit: 5000
                      period: MONTH
                  throttle:
                      burstLimit: 20
                      rateLimit: 10

package:
    patterns:
        - "handlers/data-collection.ts"
        - "handlers/detainee.ts"
        - "handlers/status.ts"

stages:
    default:
        params:
            domain: ${env:DOMAIN, 'jaildata.org'}

    dev:
        params:
            subdomain: api-dev

    prod:
        params:
            subdomain: api

resources:
    Resources:
        # SNS Topic for alerts
        AlertTopic:
            Type: AWS::SNS::Topic
            Properties:
                TopicName: jaildata-alerts-${self:provider.stage}
                DisplayName: JailData Alerts
                Tags:
                    - Key: Service
                      Value: JailData
                    - Key: Environment
                      Value: ${self:provider.stage}

        # SSM Parameter for the alert topic ARN
        AlertTopicArnParameter:
            Type: AWS::SSM::Parameter
            Properties:
                Name: /jaildata/alert-topic-arn
                Type: String
                Value: !Ref AlertTopic
                Description: SNS Topic ARN for JailData alerts

        # Email subscription to the alert topic
        AlertEmailSubscription:
            Type: AWS::SNS::Subscription
            Properties:
                Protocol: email
                TopicArn: !Ref AlertTopic
                Endpoint: ${ssm:/jaildata/alert-email}

        # DynamoDB table for jail data (single table design)
        JailDataTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: jaildata-${self:provider.stage}
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: PK
                      AttributeType: S
                    - AttributeName: SK
                      AttributeType: S
                    - AttributeName: GSI1PK
                      AttributeType: S
                    - AttributeName: GSI1SK
                      AttributeType: S
                KeySchema:
                    - AttributeName: PK
                      KeyType: HASH
                    - AttributeName: SK
                      KeyType: RANGE
                GlobalSecondaryIndexes:
                    - IndexName: GSI1
                      KeySchema:
                          - AttributeName: GSI1PK
                            KeyType: HASH
                          - AttributeName: GSI1SK
                            KeyType: RANGE
                      Projection:
                          ProjectionType: ALL
                Tags:
                    - Key: Name
                      Value: JailData Main Table
                    - Key: Environment
                      Value: ${self:provider.stage}
                    - Key: Service
                      Value: JailData

        # SQS queue for batch processing (handles inmate data batches)
        BatchProcessingQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: jaildata-batch-processing-${self:provider.stage}
                VisibilityTimeoutSeconds: 300
                MessageRetentionPeriod: 1209600 # 14 days
                RedrivePolicy:
                    deadLetterTargetArn: !GetAtt BatchProcessingDeadLetterQueue.Arn
                    maxReceiveCount: 3
                Tags:
                    - Key: Name
                      Value: JailData Batch Processing Queue
                    - Key: Environment
                      Value: ${self:provider.stage}
                    - Key: Service
                      Value: JailData

        # Dead letter queue for batch processing
        BatchProcessingDeadLetterQueue:
            Type: AWS::SQS::Queue
            Properties:
                QueueName: jaildata-batch-processing-dlq-${self:provider.stage}
                MessageRetentionPeriod: 1209600 # 14 days
                Tags:
                    - Key: Name
                      Value: JailData Batch Processing Dead Letter Queue
                    - Key: Environment
                      Value: ${self:provider.stage}
                    - Key: Service
                      Value: JailData

        # DynamoDB table for error cache and deduplication
        ErrorCacheTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: jaildata-error-cache-${self:provider.stage}
                BillingMode: PAY_PER_REQUEST
                AttributeDefinitions:
                    - AttributeName: errorKey
                      AttributeType: S
                KeySchema:
                    - AttributeName: errorKey
                      KeyType: HASH
                TimeToLiveSpecification:
                    AttributeName: ttl
                    Enabled: true
                Tags:
                    - Key: Name
                      Value: JailData Error Cache Table
                    - Key: Environment
                      Value: ${self:provider.stage}
                    - Key: Service
                      Value: AlertService

        ApiGatewayBasePathMapping:
            Type: AWS::ApiGateway::BasePathMapping
            DependsOn: ApiGatewayMethodStatusGet
            Properties:
                DomainName: "${param:subdomain}.${param:domain}"
                RestApiId:
                    Ref: ApiGatewayRestApi
                Stage: ${sls:stage}

    Outputs:
        TestUsagePlanId:
            Value: !Ref ApiGatewayUsagePlanTest
            Export:
                Name: ${self:service}-${self:provider.stage}-TestUsagePlanId

        CommunityUsagePlanId:
            Value: !Ref ApiGatewayUsagePlanCommunity
            Export:
                Name: ${self:service}-${self:provider.stage}-CommunityUsagePlanId

functions:
    # Manual data collection trigger
    dataCollectionManual:
        handler: handlers/data-collection.collect
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - http:
                  path: /collect/{facilityId}
                  method: post
                  private: true

    # Scheduled data collection functions for different facilities
    # To add a new facility: copy a function, change the name, set the facility ID in the input, and pick a unique schedule

    # Wake County - 10:00 AM UTC daily
    dataCollectionWake:
        handler: handlers/data-collection.collectScheduled
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - schedule:
                  rate: cron(0 10 * * ? *)
                  enabled: true
                  name: jaildata-collection-wake-${self:provider.stage}
                  description: "Daily Wake County jail data collection"
                  input: '{"facilityId": "wake"}'

    # Buncombe County - 10:15 AM UTC daily
    dataCollectionBuncombe:
        handler: handlers/data-collection.collectScheduled
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - schedule:
                  rate: cron(15 10 * * ? *)
                  enabled: true
                  name: jaildata-collection-buncombe-${self:provider.stage}
                  description: "Daily Buncombe County jail data collection"
                  input: '{"facilityId": "buncombe"}'

    # DISABLED: Mecklenburg County - Need API ID (currently 0)
    dataCollectionMecklenburg:
        handler: handlers/data-collection.collectScheduled
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - schedule:
                  rate: cron(30 10 * * ? *)
                  enabled: false # DISABLED: Need API ID
                  name: jaildata-collection-mecklenburg-${self:provider.stage}
                  description: "Daily Mecklenburg County jail data collection"
                  input: '{"facilityId": "mecklenburg"}'

    # DISABLED: Durham County - Need API ID (currently 0)
    dataCollectionDurham:
        handler: handlers/data-collection.collectScheduled
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - schedule:
                  rate: cron(0 11 * * ? *)
                  enabled: false # DISABLED: Need API ID
                  name: jaildata-collection-durham-${self:provider.stage}
                  description: "Daily Durham County jail data collection"
                  input: '{"facilityId": "durham"}'

    # DISABLED: Orange County - Need API ID (currently 0)
    dataCollectionOrange:
        handler: handlers/data-collection.collectScheduled
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - schedule:
                  rate: cron(30 11 * * ? *)
                  enabled: false # DISABLED: Need API ID
                  name: jaildata-collection-orange-${self:provider.stage}
                  description: "Daily Orange County jail data collection"
                  input: '{"facilityId": "orange"}'

    # DISABLED: Guilford County - Need API ID (currently 0)
    dataCollectionGuilford:
        handler: handlers/data-collection.collectScheduled
        memorySize: 1024
        timeout: 600 # 10 minutes
        events:
            - schedule:
                  rate: cron(0 12 * * ? *)
                  enabled: false # DISABLED: Need API ID
                  name: jaildata-collection-guilford-${self:provider.stage}
                  description: "Daily Guilford County jail data collection"
                  input: '{"facilityId": "guilford"}'

    # Batch processing function (triggered by SQS)
    batchProcessing:
        handler: handlers/batch-processing.processBatch
        memorySize: 512
        timeout: 300 # 5 minutes
        events:
            - sqs:
                  arn: !GetAtt BatchProcessingQueue.Arn
                  batchSize: 10
                  maximumBatchingWindow: 30

    # Get inmates by facility (with status filter)
    getInmatesByFacility:
        handler: handlers/detainee.getInmatesByFacility
        events:
            - http:
                  path: inmates/{facilityId}
                  method: get
                  private: true

    # Get all active inmates across facilities
    getAllActiveInmates:
        handler: handlers/detainee.getAllActiveInmates
        events:
            - http:
                  path: inmates/active
                  method: get
                  private: true

    # Search inmates by last name within a facility
    searchInmatesByName:
        handler: handlers/detainee.searchInmatesByName
        events:
            - http:
                  path: inmates/{facilityId}/search
                  method: get
                  private: true

    # Get specific inmate record
    getSpecificInmate:
        handler: handlers/detainee.getSpecificInmate
        events:
            - http:
                  path: inmates/{facilityId}/{lastName}/{firstName}/{recordDate}
                  method: get
                  private: true

    # Get specific inmate record with middle name
    getSpecificInmateWithMiddle:
        handler: handlers/detainee.getSpecificInmate
        events:
            - http:
                  path: inmates/{facilityId}/{lastName}/{firstName}/{middleName}/{recordDate}
                  method: get
                  private: true

    # Get status/health endpoint
    getStatus:
        handler: handlers/status.get
        events:
            - http:
                  path: status
                  method: get
                  private: true
